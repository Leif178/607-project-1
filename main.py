from problems import *from matplotlib import pyplot as pltfrom scipy import linalgimport numpy as nptwogamma = .1omeganaughtsquared = 1n = 10000x0 = -1v0 = 0t0 = 0tf = 35O1 = Oscillator(twogamma, omeganaughtsquared, [t0, tf], x0=x0, xdot0=v0)tEuler, xEuler = O1.euler(n)trk, xrk = O1.rk4m(n)trksp, xrksp = O1.rk4sp(n)def analyticOscillator(T, twogamma=twogamma, omeganaughtsquared=omeganaughtsquared):    x = []    eq = np.array([[1, 1], [-1/2*(twogamma-(twogamma**2-4*omeganaughtsquared)                  ** (1/2)), -1/2*(twogamma+(twogamma**2-4*omeganaughtsquared)**(1/2))]])    sol = np.array([x0, v0])    try:        c = linalg.solve(eq, sol)    except:        c = [x0, 0]    for t in T:        x.append(c[0]*np.exp(-1/2*(twogamma-(twogamma**2-4*omeganaughtsquared)**(1/2))*t) +                 c[1]*np.exp(-1/2*(twogamma+(twogamma**2-4*omeganaughtsquared)**(1/2))*t))    return xt = np.arange(t0, tf, (tf-t0)/n)x = analyticOscillator(t)plt.plot(tEuler, xEuler)plt.plot(trk, xrk)plt.plot(trksp, xrksp)plt.plot(t, x)plt.legend(['euler', 'rk4', 'rksp', 'analytic'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Integration Answers')# plt.savefig('ODESol.png')plt.show()dEuler = []drk = []drksp = []for i in range(len(x)):    dEuler.append(xEuler[i]-x[i])    drk.append(xrk[i]-x[i])n2 = len(xrksp)tsp = np.arange(t0, tf, (tf-t0)/n2)xsp = analyticOscillator(tsp)for i in range(len(xsp)):    drksp.append(xrksp[i]-xsp[i])plt.plot(tEuler, dEuler)plt.plot(trk, drk)plt.plot(trksp, drksp)plt.legend(['euler', 'rk4', 'rksp'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Deviation from Analytic')# plt.savefig('deviation.png')plt.show()O2 = Oscillator(0, omeganaughtsquared, [t0, tf], x0=x0, xdot0=v0)xcos = []for tau in t:    xcos.append(-np.cos(np.sqrt(omeganaughtsquared)*tau))x2 = analyticOscillator(t, twogamma=0)tEuler, xEuler = O2.euler(n)trk, xrk = O2.rk4m(n)trksp, xrksp = O2.rk4sp(n)plt.plot(tEuler, xEuler)plt.plot(trk, xrk)plt.plot(trksp, xrksp)plt.plot(t, x2)plt.plot(t, xcos)plt.legend(['euler', 'rk4', 'rksp', 'analytic', 'cos function'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Solutions for gamma=0')plt.savefig('gammais0.png')plt.show()dEuler = []drk = []drksp = []dcos = []for i in range(len(x)):    dEuler.append(xEuler[i]-x2[i])    drk.append(xrk[i]-x2[i])    dcos.append(xcos[i]-x2[i])n2 = len(xrksp)tsp = np.arange(t0, tf, (tf-t0)/n2)xsp = analyticOscillator(tsp, twogamma=0)for i in range(len(xsp)):    drksp.append(xrksp[i]-xsp[i])plt.plot(tEuler, dEuler)plt.plot(trk, drk)plt.plot(t, dcos)plt.plot(trksp, drksp)plt.legend(['euler', 'rk4', 'cos', 'rksp'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Deviation from Analytic gamma=0')# plt.savefig('deviationgammais0all.png')plt.show()plt.plot(trk, drk)plt.plot(t, dcos)plt.legend(['rk4', 'cos'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Deviation from Analytic gamma=0')# plt.savefig('deviationgammais0rk4.png')plt.show()plt.plot(t, dcos)plt.legend(['cos'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Deviation from Analytic gamma=0')# plt.savefig('deviationgammais0cos.png')plt.show()n = 10000O3 = Oscillator(np.sqrt(omeganaughtsquared)*2,                omeganaughtsquared, [t0, tf], x0=x0, xdot0=v0)tEuler, xEuler = O3.euler(n)trk, xrk = O3.rk4m(n)trksp, xrksp = O3.rk4sp(n)x3 = analyticOscillator(t, twogamma=np.sqrt(omeganaughtsquared)*2)plt.plot(tEuler, xEuler)plt.plot(trk, xrk)plt.plot(trksp, xrksp)plt.plot(t, x3)plt.legend(['euler', 'rk4', 'rksp', 'analytic'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Solutions for gamma^2=omega^2')# plt.savefig('gammaisomega.png')plt.show()dEuler = []drk = []drksp = []for i in range(len(x)):    dEuler.append(xEuler[i]-x3[i])    drk.append(xrk[i]-x3[i])n2 = len(xrksp)tsp = np.arange(t0, tf, (tf-t0)/n2)xsp = analyticOscillator(tsp, twogamma=(np.sqrt(omeganaughtsquared)*2))for i in range(len(xsp)):    drksp.append(xrksp[i]-xsp[i])plt.plot(tEuler, dEuler)plt.plot(trk, drk)plt.plot(trksp, drksp)plt.legend(['euler', 'rk4', 'rksp'])plt.ylabel('Posistiion (m)')plt.xlabel('Time (s)')plt.title('Deviation from Analytic gamma^2=omega^2')# plt.savefig('deviationgammaisomega.png')plt.show()z1 = 3g1 = Gamma(z1)print("z=",z1, 'Reimann:',g1.rInt(), "Trapezoidal:",g1.trapInt(), "Simpson's:", g1.simpInt(), 'scipy Trapezoidal:' , g1.trapIntSp(),"scipy Simpson's", g1.simpIntSp())z1 = 8g1 = Gamma(z1)print("z=",z1, 'Reimann:',g1.rInt(), "Trapezoidal:",g1.trapInt(), "Simpson's:", g1.simpInt(), 'scipy Trapezoidal:' , g1.trapIntSp(),"scipy Simpson's", g1.simpIntSp())z1 = 6.07g1 = Gamma(z1)print("z=",z1, 'Reimann:',g1.rInt(), "Trapezoidal:",g1.trapInt(), "Simpson's:", g1.simpInt(), 'scipy Trapezoidal:' , g1.trapIntSp(),"scipy Simpson's", g1.simpIntSp())